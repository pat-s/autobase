---
- name: vitabaks.autobase.etcd_cluster | Deploy etcd Cluster
  hosts: etcd_cluster
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true

  pre_tasks:
    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset:
          - network
      when: ansible_all_ipv4_addresses is not defined

    # Get docker0 interface IP if it exists
    - name: Get docker0 interface IP
      ansible.builtin.set_fact:
        docker0_ip: "{{ ansible_docker0.ipv4.address | default('') }}"
      when: ansible_docker0 is defined and ansible_docker0.ipv4 is defined

    # Define bind_address for each host (first private IPv4, excluding docker0), unless set in inventory.
    - name: Expose bind_address as facts
      ansible.builtin.set_fact:
        bind_address: "{{ (ansible_all_ipv4_addresses | ansible.utils.ipaddr('private') | reject('equalto', docker0_ip | default('')) | list)[0] | default((ansible_all_ipv4_addresses | ansible.utils.ipaddr('private'))[0], true) }}"
      when: bind_address is not defined

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method | default('packages') == "packages"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method | default('packages') == "packages"

    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

  roles:
    - role: vitabaks.autobase.firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - role: vitabaks.autobase.hostname
    - role: vitabaks.autobase.resolv_conf
    - role: vitabaks.autobase.etc_hosts
    - role: vitabaks.autobase.timezone
    - role: vitabaks.autobase.ntp

    - role: vitabaks.autobase.etcd
