---
- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined
  check_mode: false

- name: Install openssh-client package
  become: true
  become_user: root
  ansible.builtin.apt:
    name: openssh-client
    state: present
  when:
    - ansible_os_family == "Debian"
    - "'openssh-client' not in ansible_facts.packages"

- name: Install openssh-clients package
  become: true
  become_user: root
  ansible.builtin.dnf:
    name: openssh-clients
    state: present
  when:
    - ansible_os_family == "RedHat"
    - "'openssh-clients' not in ansible_facts.packages"

- name: Ensure "{{ pgbackrest_repo_user }}" exists on pgbackrest server
  ansible.builtin.user:
    name: "{{ pgbackrest_repo_user }}"
    state: present
    system: true
  when: "'pgbackrest' in group_names"

- name: ssh_keys | Ensure ssh key are created for "{{ pgbackrest_repo_user }}" user on pgbackrest server
  ansible.builtin.user:
    name: "{{ pgbackrest_repo_user }}"
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  when: "'pgbackrest' in group_names"

- name: Ensure "postgres" exists on database servers
  ansible.builtin.user:
    name: "postgres"
    state: present
    system: true
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Ensure ssh key are created for "postgres" user on database servers
  ansible.builtin.user:
    name: "postgres"
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Get public ssh key from pgbackrest server
  ansible.builtin.slurp:
    src: "~{{ pgbackrest_repo_user }}/.ssh/id_rsa.pub"
  register: pgbackrest_server_sshkey
  changed_when: false
  when: "'pgbackrest' in group_names"

- name: ssh_keys | Get public ssh key from database servers
  ansible.builtin.slurp:
    src: "~postgres/.ssh/id_rsa.pub"
  register: postgres_cluster_sshkey
  changed_when: false
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Add pgbackrest ssh key in "~postgres/.ssh/authorized_keys" on database servers
  ansible.posix.authorized_key:
    user: postgres
    state: present
    key: "{{ hostvars[item].get('pgbackrest_server_sshkey', {}).get('content', '') | b64decode }}"
  loop: "{{ groups['pgbackrest'] | default([]) }}"
  when:
    - "'postgres_cluster' in group_names"
    - hostvars[item].get('pgbackrest_server_sshkey') is not none
    - hostvars[item].get('pgbackrest_server_sshkey', {}).get('content', '') | length > 0

- name: ssh_keys | Add database ssh keys in "~{{ pgbackrest_repo_user }}/.ssh/authorized_keys" on pgbackrest server
  ansible.posix.authorized_key:
    user: "{{ pgbackrest_repo_user }}"
    state: present
    key: "{{ hostvars[item].get('postgres_cluster_sshkey', {}).get('content', '') | b64decode }}"
  loop: "{{ groups['postgres_cluster'] }}"
  when:
    - "'pgbackrest' in group_names"
    - hostvars[item].get('postgres_cluster_sshkey') is not none
    - hostvars[item].get('postgres_cluster_sshkey', {}).get('content', '') | length > 0

# if 'backup-standby' are specified in pgbackrest_conf.global
- name: ssh_keys | Add ssh keys in "~postgres/.ssh/authorized_keys" on database servers
  ansible.posix.authorized_key:
    user: postgres
    state: present
    key: "{{ hostvars[item].get('postgres_cluster_sshkey', {}).get('content', '') | b64decode }}"
  loop: "{{ groups['postgres_cluster'] }}"
  when:
    - "'postgres_cluster' in group_names"
    - pgbackrest_conf.global | selectattr('option', 'equalto', 'backup-standby') | map(attribute='value') | list | last | default('') == 'y'
    - hostvars[item].get('postgres_cluster_sshkey') is not none
    - hostvars[item].get('postgres_cluster_sshkey', {}).get('content', '') | length > 0

- name: known_hosts | Get public ssh keys of hosts (ssh-keyscan)
  ansible.builtin.command: ssh-keyscan -p {{ target_port }} {{ target_host }}
  loop: "{{ ((groups['postgres_cluster'] | default([])) + (groups['pgbackrest'] | default([]))) }}"
  vars:
    # Pull hostvars once to avoid repeating lookups
    item_vars: "{{ hostvars[item] | default({}) }}"
    # Address selection order:
    #  - DB nodes: prefer bind_address
    #  - pgBackRest host: prefer pgbackrest_repo_host if set
    #  - fallback: ansible_host, then inventory name (item)
    target_host: >-
      {{
        item_vars.get('bind_address')
        or ((item in (groups['pgbackrest'] | default([]))) and item_vars.get('pgbackrest_repo_host'))
        or item_vars.get('ansible_host')
        or item
      }}
    # Port selection order: ansible_ssh_port -> ansible_port -> 22
    target_port: "{{ item_vars.get('ansible_ssh_port') or item_vars.get('ansible_port') or 22 }}"
  register: ssh_known_host_keyscan
  changed_when: false

- name: known_hosts | add ssh public keys in "~postgres/.ssh/known_hosts" on database servers
  become: true
  become_user: postgres
  ansible.builtin.known_hosts:
    host: "{{ item.stdout_lines | select('match', '^[^#].*') | first | split(' ') | first }}"
    key: "{{ item.stdout_lines | select('match', '^[^#].*') | first }}"
    path: "~postgres/.ssh/known_hosts"
  no_log: true
  loop: "{{ ssh_known_host_keyscan.results }}"
  when:
    - "'postgres_cluster' in group_names"
    - item.stdout_lines | select('match', '^[^#].*') | list | length > 0

- name: known_hosts | add ssh public keys in "~{{ pgbackrest_repo_user }}/.ssh/known_hosts" on pgbackrest server
  become: true
  become_user: "{{ pgbackrest_repo_user }}"
  ansible.builtin.known_hosts:
    host: "{{ item.stdout_lines | select('match', '^[^#].*') | first | split(' ') | first }}"
    key: "{{ item.stdout_lines | select('match', '^[^#].*') | first }}"
    path: "~{{ pgbackrest_repo_user }}/.ssh/known_hosts"
  no_log: true
  loop: "{{ ssh_known_host_keyscan.results }}"
  when:
    - "'pgbackrest' in group_names"
    - item.stdout_lines | select('match', '^[^#].*') | list | length > 0
